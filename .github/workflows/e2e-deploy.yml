name: End-to-End Deployment

on:
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend'
        type: boolean
        default: true
      deploy_backend:
        description: 'Deploy backend'
        type: boolean
        default: true
      environment:
        description: 'Target environment'
        type: choice
        options:
          - development
          - staging
          - production
        default: 'development'

jobs:
  build-test-deploy:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      NODE_ENV: ${{ github.event.inputs.environment }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build --filter=@nft-minter/shared

      - name: Build frontend
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        run: npm run build --filter=nft-minter-front
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Build backend
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        run: npm run build --filter=nft-minter-back
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd /home/azureuser/nft-minter-monorepo
            git pull origin development
            
            # Setup environment files
            if [[ "${{ github.event.inputs.deploy_backend }}" == "true" ]]; then
              echo "Setting up backend environment..."
              cat > apps/backend/.env << EOT
              DB_HOST=${{ secrets.DB_HOST }}
              DB_PORT=${{ secrets.DB_PORT }}
              DB_USERNAME=${{ secrets.DB_USERNAME }}
              DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              DB_DATABASE=${{ secrets.DB_DATABASE }}
              DATABASE_URL=${{ secrets.DATABASE_URL }}
              ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}
              ETHERSCAN_API_ENDPOINT=${{ secrets.ETHERSCAN_API_ENDPOINT }}
              ETH_RPC_URL=${{ secrets.ETH_RPC_URL }}
              OPENSEA_API_KEY=${{ secrets.OPENSEA_API_KEY }}
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
              REDIS_HOST=${{ secrets.REDIS_HOST }}
              REDIS_PORT=${{ secrets.REDIS_PORT }}
              OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
              EOT
              
              # Build and start the backend container
              cd apps/backend
              docker-compose up -d --build api
              cd ../..
            fi
            
            if [[ "${{ github.event.inputs.deploy_frontend }}" == "true" ]]; then
              echo "Setting up frontend environment..."
              cat > apps/frontend/.env.local << EOT
              NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
              EOT
              
              # Build and start the frontend container
              cd apps/frontend
              docker-compose up -d --build app
            fi
          EOF
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "Deployment to ${{ github.event.inputs.environment }} completed successfully!"
          # Add notification logic (Slack, Discord, etc.) if needed
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment successful!"}' ${{ secrets.SLACK_WEBHOOK_URL }} 