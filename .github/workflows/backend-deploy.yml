name: Backend Deploy

on:
  push:
    branches: [development]
    paths:
      - 'apps/backend/**'
      - 'packages/shared/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build --filter=@nft-minter/shared

      - name: Build backend
        run: npm run build --filter=nft-minter-back
        env:
          NODE_ENV: production

      - name: Test backend
        run: npm run test --filter=nft-minter-back
        env:
          NODE_ENV: test

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd /home/azureuser/nft-minter-monorepo
            git pull origin development
            
            # Create or update .env file with all secrets
            cat > apps/backend/.env << EOT
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}
            ETHERSCAN_API_ENDPOINT=${{ secrets.ETHERSCAN_API_ENDPOINT }}
            ETH_RPC_URL=${{ secrets.ETH_RPC_URL }}
            OPENSEA_API_KEY=${{ secrets.OPENSEA_API_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            EOT
            
            # Restart the application using docker-compose
            cd apps/backend
            docker-compose up -d --build api
          EOF 